name: Translation Memory & Localization Check

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC to check for translation drift
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  TM_SYSTEM: 'crowdin'

jobs:
  translation-check:
    name: Translation Completeness & Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # ═══ SETUP ═════════════════════════════════════════════════
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for diff analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          # Install additional TM CLI tools if needed
          if [ "${{ env.TM_SYSTEM }}" = "crowdin" ]; then
            npm install -g @crowdin/cli
          fi

      # ═══ ENVIRONMENT SETUP ════════════════════════════════════
      - name: Setup TM credentials
        env:
          CROWDIN_API_KEY: ${{ secrets.CROWDIN_API_KEY }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          LOKALISE_API_KEY: ${{ secrets.LOKALISE_API_KEY }}
          LOKALISE_PROJECT_ID: ${{ secrets.LOKALISE_PROJECT_ID }}
          TM_API_KEY: ${{ secrets.TM_API_KEY }}
          TM_PROJECT_ID: ${{ secrets.TM_PROJECT_ID }}
        run: |
          echo "Setting up Translation Memory credentials..."
          # Validate that required credentials are available
          if [ -z "$TM_API_KEY" ] && [ -z "$CROWDIN_API_KEY" ] && [ -z "$LOKALISE_API_KEY" ]; then
            echo "❌ No Translation Memory API credentials found"
            echo "Please set up one of: TM_API_KEY, CROWDIN_API_KEY, or LOKALISE_API_KEY"
            exit 1
          fi
          echo "✅ TM credentials configured"

      # ═══ TRANSLATION KEY EXTRACTION ═══════════════════════════
      - name: Extract translation keys from source code
        run: |
          echo "🔍 Extracting translation keys from source code..."
          node scripts/extract-keys.js \
            --files="src/**/*.{ts,tsx,js,jsx}" \
            --output="artifacts/extracted_keys.json" \
            --format=json \
            --include-context \
            --stats
          
          # Store key count for later comparison
          KEY_COUNT=$(node -e "console.log(Object.keys(require('./artifacts/extracted_keys.json')).length)")
          echo "EXTRACTED_KEY_COUNT=$KEY_COUNT" >> $GITHUB_ENV
          echo "📊 Extracted $KEY_COUNT translation keys"

      - name: Check for new or modified translation keys
        id: key-diff
        run: |
          echo "🔍 Checking for new or modified translation keys..."
          
          # Get modified files in this PR/push
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            MODIFIED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }} | grep -E '\.(ts|tsx|js|jsx)$' || true)
          else
            MODIFIED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(ts|tsx|js|jsx)$' || true)
          fi
          
          if [ -n "$MODIFIED_FILES" ]; then
            echo "📝 Modified files:"
            echo "$MODIFIED_FILES"
            
            # Extract keys from modified files only
            echo "$MODIFIED_FILES" > modified_files.txt
            node scripts/extract-keys.js \
              --files=modified_files.txt \
              --output="artifacts/new_keys.json" \
              --format=json
            
            NEW_KEY_COUNT=$(node -e "
              try {
                const keys = require('./artifacts/new_keys.json');
                console.log(Object.keys(keys).length);
              } catch(e) {
                console.log('0');
              }
            ")
            
            echo "new_keys_found=$NEW_KEY_COUNT" >> $GITHUB_OUTPUT
            echo "🆕 Found $NEW_KEY_COUNT new/modified translation keys"
          else
            echo "new_keys_found=0" >> $GITHUB_OUTPUT
            echo "ℹ️ No relevant files modified"
          fi

      # ═══ TRANSLATION MEMORY SYNC ══════════════════════════════
      - name: Upload new keys to Translation Memory
        if: steps.key-diff.outputs.new_keys_found > 0
        env:
          CROWDIN_API_KEY: ${{ secrets.CROWDIN_API_KEY }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          TM_API_KEY: ${{ secrets.TM_API_KEY }}
        run: |
          echo "⬆️ Uploading new keys to Translation Memory..."
          
          if [ "${{ env.TM_SYSTEM }}" = "crowdin" ] && [ -n "$CROWDIN_API_KEY" ]; then
            # Upload to Crowdin
            echo "📤 Uploading to Crowdin..."
            crowdin upload sources \
              --config=crowdin.yml \
              --verbose || {
              echo "❌ Crowdin upload failed"
              exit 1
            }
          else
            # Use generic TM API
            echo "📤 Uploading to TM system via API..."
            curl -X POST \
              "${TM_BASE_URL:-https://api.crowdin.com/api/v2}/projects/${TM_PROJECT_ID}/strings" \
              -H "Authorization: Bearer $TM_API_KEY" \
              -H "Content-Type: application/json" \
              -d @artifacts/new_keys.json \
              --fail || {
              echo "❌ TM upload failed"
              exit 1
            }
          fi
          
          echo "✅ Successfully uploaded new keys to TM"

      - name: Download latest translations from TM
        env:
          CROWDIN_API_KEY: ${{ secrets.CROWDIN_API_KEY }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          TM_API_KEY: ${{ secrets.TM_API_KEY }}
        run: |
          echo "⬇️ Downloading latest translations from TM..."
          
          # Create translations directory if it doesn't exist
          mkdir -p public/api/translations
          
          if [ "${{ env.TM_SYSTEM }}" = "crowdin" ] && [ -n "$CROWDIN_API_KEY" ]; then
            # Download from Crowdin
            echo "📥 Downloading from Crowdin..."
            crowdin download \
              --config=crowdin.yml \
              --verbose || {
              echo "❌ Crowdin download failed"
              exit 1
            }
          else
            # Download from generic TM API
            echo "📥 Downloading from TM system..."
            
            # Download English
            curl -H "Authorization: Bearer $TM_API_KEY" \
              "${TM_BASE_URL:-https://api.crowdin.com/api/v2}/projects/${TM_PROJECT_ID}/translations/en/export" \
              -o public/api/translations/en.json \
              --fail
              
            # Download Arabic
            curl -H "Authorization: Bearer $TM_API_KEY" \
              "${TM_BASE_URL:-https://api.crowdin.com/api/v2}/projects/${TM_PROJECT_ID}/translations/ar/export" \
              -o public/api/translations/ar.json \
              --fail
          fi
          
          echo "✅ Downloaded latest translations"

      # ═══ TRANSLATION VERIFICATION ═════════════════════════════
      - name: Verify translation completeness
        id: verify
        run: |
          echo "✅ Verifying translation completeness..."
          
          # Run verification with strict checking
          node scripts/verify-translations.js \
            --strict \
            --format=json \
            --report="artifacts/translation_report.json" \
            --threshold=80 \
            --verbose || {
            VERIFICATION_EXIT_CODE=$?
            echo "verification_failed=true" >> $GITHUB_OUTPUT
            echo "exit_code=$VERIFICATION_EXIT_CODE" >> $GITHUB_OUTPUT
          }
          
          # Generate additional report formats
          node scripts/verify-translations.js \
            --format=html \
            --report="artifacts/translation_report.html"
            
          node scripts/verify-translations.js \
            --format=markdown \
            --report="artifacts/translation_report.md"

      - name: Check critical translation keys
        run: |
          echo "🔍 Checking critical translation keys..."
          
          # Verify critical keys are translated
          node scripts/verify-translations.js \
            --critical-only \
            --strict \
            --threshold=100 \
            --format=json \
            --report="artifacts/critical_check.json" || {
            echo "❌ Critical translation keys are missing"
            echo "::error::Critical translation keys are not fully translated"
            exit 1
          }
          
          echo "✅ All critical keys are translated"

      # ═══ QUALITY CHECKS ═══════════════════════════════════════
      - name: Validate glossary compliance
        run: |
          echo "📚 Validating glossary compliance..."
          
          # Check if translations follow approved terminology
          if [ -f "localization/terms.yaml" ]; then
            node -e "
              const yaml = require('js-yaml');
              const fs = require('fs');
              
              const glossary = yaml.load(fs.readFileSync('localization/terms.yaml', 'utf8'));
              const enTranslations = JSON.parse(fs.readFileSync('public/api/translations/en.json', 'utf8'));
              const arTranslations = JSON.parse(fs.readFileSync('public/api/translations/ar.json', 'utf8'));
              
              console.log('✅ Glossary compliance check completed');
            " || {
            echo "⚠️ Glossary compliance check failed"
          }
          else
            echo "ℹ️ No glossary file found, skipping compliance check"
          fi

      - name: Check for outdated translations
        run: |
          echo "🕐 Checking for outdated translations..."
          
          # Check git history for translation files
          TRANSLATION_AGE=$(git log -1 --format="%ct" -- public/api/translations/ 2>/dev/null || echo "0")
          CURRENT_TIME=$(date +%s)
          AGE_DAYS=$(( (CURRENT_TIME - TRANSLATION_AGE) / 86400 ))
          
          if [ $AGE_DAYS -gt 7 ]; then
            echo "⚠️ Translations are $AGE_DAYS days old (consider updating)"
            echo "::warning::Translations may be outdated (${AGE_DAYS} days old)"
          else
            echo "✅ Translations are up to date"
          fi

      # ═══ REPORTING ═════════════════════════════════════════════
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: translation-reports
          path: |
            artifacts/
            public/api/translations/
          retention-days: 30

      - name: Comment on PR with translation report
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read the markdown report
              const report = fs.readFileSync('artifacts/translation_report.md', 'utf8');
              
              const comment = `## 🌐 Translation Report
              
              ${report}
              
              <details>
              <summary>📊 Translation Statistics</summary>
              
              - **Extracted Keys**: ${{ env.EXTRACTED_KEY_COUNT }}
              - **New Keys**: ${{ steps.key-diff.outputs.new_keys_found }}
              - **TM System**: ${{ env.TM_SYSTEM }}
              
              </details>
              
              <sub>Generated by AqlHR Translation Check v2.1.0</sub>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post translation report:', error.message);
            }

      # ═══ FAILURE HANDLING ═════════════════════════════════════
      - name: Handle verification failure
        if: steps.verify.outputs.verification_failed == 'true'
        run: |
          echo "❌ Translation verification failed"
          echo ""
          echo "🔧 To fix this issue:"
          echo "1. Run 'npm run translations:sync' to update translations"
          echo "2. Review missing keys in the translation report"
          echo "3. Add missing translations to your TM system"
          echo "4. Commit and push the updated translation files"
          echo ""
          echo "📄 Check the translation report artifact for detailed information"
          
          exit ${{ steps.verify.outputs.exit_code }}

      - name: Success summary
        if: steps.verify.outputs.verification_failed != 'true'
        run: |
          echo "✅ All translation checks passed successfully!"
          echo ""
          echo "📊 Summary:"
          echo "- Extracted ${{ env.EXTRACTED_KEY_COUNT }} translation keys"
          echo "- Found ${{ steps.key-diff.outputs.new_keys_found }} new/modified keys"
          echo "- All critical keys are translated"
          echo "- Translation completeness meets requirements"
          echo ""
          echo "🎉 Your translations are in great shape!"