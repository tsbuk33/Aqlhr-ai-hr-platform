import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { HfInference } from 'https://esm.sh/@huggingface/inference@2.3.2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { prompt, style = 'professional', format = 'png', size = '1024x1024' } = await req.json();

    // Try Hugging Face first (open-source)
    const hfToken = Deno.env.get('HUGGING_FACE_ACCESS_TOKEN');
    if (hfToken) {
      try {
        const hf = new HfInference(hfToken);
        
        // Enhance prompt for HR/business context
        const enhancedPrompt = `Professional HR/business context: ${prompt}. Clean, modern, corporate style with high quality graphics suitable for business presentations and reports.`;

        const image = await hf.textToImage({
          inputs: enhancedPrompt,
          model: 'black-forest-labs/FLUX.1-schnell'
        });

        // Convert to base64
        const arrayBuffer = await image.arrayBuffer();
        const base64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));

        return new Response(JSON.stringify({
          success: true,
          image: `data:image/png;base64,${base64}`,
          prompt: enhancedPrompt,
          model: 'FLUX.1-schnell (open-source)',
          timestamp: new Date().toISOString()
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      } catch (hfError) {
        console.error('Hugging Face error:', hfError);
        // Continue to fallback
      }
    }

    // Fallback: Generate SVG-based image locally
    const svgImage = generateLocalSVGImage(prompt, style);
    
    return new Response(JSON.stringify({
      success: true,
      image: `data:image/svg+xml;base64,${btoa(svgImage)}`,
      prompt: prompt,
      model: 'Local SVG Generator (open-source)',
      timestamp: new Date().toISOString(),
      fallback: true
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('Image generation error:', error);
    
    // Always provide a fallback image
    const fallbackSVG = generateFallbackSVG();
    
    return new Response(JSON.stringify({
      success: true,
      image: `data:image/svg+xml;base64,${btoa(fallbackSVG)}`,
      prompt: 'Fallback image',
      model: 'SVG Fallback',
      timestamp: new Date().toISOString(),
      fallback: true,
      note: 'Generated local SVG due to API limitations'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});

function generateLocalSVGImage(prompt: string, style: string): string {
  const colors = {
    professional: ['#2c5282', '#3182ce', '#4299e1'],
    corporate: ['#1a365d', '#2c5282', '#3182ce'],
    modern: ['#6366f1', '#8b5cf6', '#a855f7']
  };
  
  const colorScheme = colors[style as keyof typeof colors] || colors.professional;
  
  return `<svg width="512" height="512" xmlns="http://www.w3.org/2000/svg">
    <defs>
      <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" style="stop-color:${colorScheme[0]};stop-opacity:1" />
        <stop offset="50%" style="stop-color:${colorScheme[1]};stop-opacity:1" />
        <stop offset="100%" style="stop-color:${colorScheme[2]};stop-opacity:1" />
      </linearGradient>
    </defs>
    
    <rect width="512" height="512" fill="url(#bg)" />
    
    <!-- HR/Business Icon -->
    <g transform="translate(156, 156)">
      <circle cx="100" cy="100" r="80" fill="white" opacity="0.9" />
      <path d="M60 80 h80 M60 100 h80 M60 120 h80" stroke="${colorScheme[0]}" stroke-width="6" fill="none" />
      <circle cx="70" cy="60" r="12" fill="${colorScheme[0]}" />
      <circle cx="130" cy="60" r="12" fill="${colorScheme[0]}" />
      <path d="M50 140 Q100 160 150 140" stroke="${colorScheme[0]}" stroke-width="4" fill="none" />
    </g>
    
    <!-- Text -->
    <text x="256" y="400" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="24" font-weight="bold">
      ${prompt.substring(0, 20)}${prompt.length > 20 ? '...' : ''}
    </text>
    
    <text x="256" y="430" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="14" opacity="0.8">
      Generated by AqlHR AI
    </text>
  </svg>`;
}

function generateFallbackSVG(): string {
  return `<svg width="512" height="512" xmlns="http://www.w3.org/2000/svg">
    <rect width="512" height="512" fill="#f8f9fa" />
    <circle cx="256" cy="256" r="100" fill="#e9ecef" stroke="#6c757d" stroke-width="2" />
    <text x="256" y="270" text-anchor="middle" fill="#6c757d" font-family="Arial, sans-serif" font-size="20">
      AqlHR Image
    </text>
  </svg>`;
}