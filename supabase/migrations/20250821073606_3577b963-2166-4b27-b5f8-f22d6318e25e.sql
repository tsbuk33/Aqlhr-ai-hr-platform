-- Settings per tenant (thresholds, reminder windows, templates)
create table if not exists public.compliance_settings (
  id uuid primary key default gen_random_uuid(),
  tenant_id uuid not null,
  saudization_green_threshold numeric default 60,
  saudization_yellow_threshold numeric default 40,
  iqama_reminders int[] default ARRAY[60,30,7],
  letter_footer_en text default 'Generated by AqlHR – PDPL compliant. No national IDs stored in logs.',
  letter_footer_ar text default 'تم إنشاء الخطاب بواسطة عقل للموارد البشرية – متوافق مع نظام حماية البيانات الشخصية.',
  updated_at timestamptz default now(),
  updated_by uuid
);

-- Letters generated (stored in private bucket)
create table if not exists public.compliance_letters (
  id uuid primary key default gen_random_uuid(),
  tenant_id uuid not null,
  employee_id uuid not null,
  type text check (type in ('iqama_renewal','visa_renewal','custom')) not null,
  lang text check (lang in ('en','ar')) not null,
  expiry_date date,
  reminder_day int,
  storage_path text not null,
  created_at timestamptz default now(),
  created_by uuid
);

-- Autopilot runs log (no PII)
create table if not exists public.compliance_runs (
  id uuid primary key default gen_random_uuid(),
  tenant_id uuid not null,
  ran_at timestamptz default now(),
  stats jsonb,
  status text check (status in ('ok','partial','error')) default 'ok',
  error text
);

-- Create indexes
create index if not exists idx_comp_settings_tenant on public.compliance_settings(tenant_id);
create index if not exists idx_comp_letters_tenant on public.compliance_letters(tenant_id);
create index if not exists idx_comp_letters_employee on public.compliance_letters(employee_id);
create index if not exists idx_comp_runs_tenant on public.compliance_runs(tenant_id);

-- Helper: compute Saudization color from current snapshot (or latest)
create or replace function public.saudization_color_v1(p_tenant uuid)
returns table(color text, rate numeric)
language sql stable security definer set search_path=public as $$
  with s as (
    select saudization_rate
    from public.kpi_snapshots
    where company_id = p_tenant
    order by snap_date desc limit 1
  ),
  cfg as (
    select coalesce(saudization_green_threshold,60) as green,
           coalesce(saudization_yellow_threshold,40) as yellow
    from public.compliance_settings where tenant_id = p_tenant
    union all select 60,40 where not exists (select 1 from public.compliance_settings where tenant_id = p_tenant)
  )
  select
    case when (select saudization_rate from s) >= (select green from cfg) then 'green'
         when (select saudization_rate from s) >= (select yellow from cfg) then 'yellow'
         else 'red' end as color,
    coalesce((select saudization_rate from s),0) as rate;
$$;

-- RLS policies
alter table public.compliance_settings enable row level security;
alter table public.compliance_letters enable row level security;
alter table public.compliance_runs enable row level security;

create policy if not exists "tenant_rw_comp_settings" on public.compliance_settings
  for all using (tenant_id = get_user_company_id()) with check (tenant_id = get_user_company_id());
  
create policy if not exists "tenant_rw_comp_letters" on public.compliance_letters
  for all using (tenant_id = get_user_company_id()) with check (tenant_id = get_user_company_id());
  
create policy if not exists "tenant_rw_comp_runs" on public.compliance_runs
  for all using (tenant_id = get_user_company_id()) with check (tenant_id = get_user_company_id());

-- Create storage bucket for compliance letters
insert into storage.buckets (id, name, public) values ('compliance-letters', 'compliance-letters', false)
on conflict (id) do nothing;

-- Storage policies for compliance letters (private, admin/hr access only)
create policy if not exists "Compliance letters tenant read access"
on storage.objects for select
using (
  bucket_id = 'compliance-letters' 
  and auth.uid() is not null
  and exists (
    select 1 from user_roles ur 
    where ur.user_id = auth.uid() 
    and ur.role in ('admin', 'hr_manager', 'super_admin')
    and ur.company_id = get_user_company_id()
  )
);

create policy if not exists "Compliance letters tenant write access"
on storage.objects for insert
with check (
  bucket_id = 'compliance-letters'
  and auth.uid() is not null
  and exists (
    select 1 from user_roles ur 
    where ur.user_id = auth.uid() 
    and ur.role in ('admin', 'hr_manager', 'super_admin')
    and ur.company_id = get_user_company_id()
  )
);

create policy if not exists "Compliance letters tenant update access"
on storage.objects for update
using (
  bucket_id = 'compliance-letters'
  and auth.uid() is not null
  and exists (
    select 1 from user_roles ur 
    where ur.user_id = auth.uid() 
    and ur.role in ('admin', 'hr_manager', 'super_admin')
    and ur.company_id = get_user_company_id()
  )
);

create policy if not exists "Compliance letters tenant delete access"
on storage.objects for delete
using (
  bucket_id = 'compliance-letters'
  and auth.uid() is not null
  and exists (
    select 1 from user_roles ur 
    where ur.user_id = auth.uid() 
    and ur.role in ('admin', 'hr_manager', 'super_admin')
    and ur.company_id = get_user_company_id()
  )
);