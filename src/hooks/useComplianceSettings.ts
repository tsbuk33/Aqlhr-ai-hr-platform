import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface ComplianceSettings {
  id?: string;
  tenant_id: string;
  saudization_green_threshold: number;
  saudization_yellow_threshold: number;
  iqama_reminders: number[];
  letter_footer_en: string;
  letter_footer_ar: string;
  updated_at?: string;
  updated_by?: string;
}

export const useComplianceSettings = () => {
  const [settings, setSettings] = useState<ComplianceSettings | null>(null);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  const fetchSettings = async () => {
    try {
      setLoading(true);

      // Get current user's company
      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data: userRoles } = await supabase
        .from('user_roles')
        .select('company_id')
        .eq('user_id', userData.user.id)
        .maybeSingle();

      if (!userRoles?.company_id) return;

      // Fetch compliance settings
      const { data, error } = await supabase
        .from('compliance_settings')
        .select('*')
        .eq('tenant_id', userRoles.company_id)
        .maybeSingle();

      if (error && error.code !== 'PGRST116') {
        throw error;
      }

      // If no settings exist, create default ones
      if (!data) {
        const defaultSettings: ComplianceSettings = {
          tenant_id: userRoles.company_id,
          saudization_green_threshold: 60,
          saudization_yellow_threshold: 40,
          iqama_reminders: [60, 30, 7],
          letter_footer_en: 'Generated by AqlHR – PDPL compliant. No national IDs stored in logs.',
          letter_footer_ar: 'تم إنشاء الخطاب بواسطة عقل للموارد البشرية – متوافق مع نظام حماية البيانات الشخصية.',
          updated_by: userData.user.id
        };

        const { data: newSettings, error: insertError } = await supabase
          .from('compliance_settings')
          .insert(defaultSettings)
          .select()
          .single();

        if (insertError) throw insertError;
        setSettings(newSettings);
      } else {
        setSettings(data);
      }

    } catch (error) {
      console.error('Error fetching compliance settings:', error);
      toast({
        title: "Error",
        description: "Failed to load compliance settings",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const updateSettings = async (updates: Partial<ComplianceSettings>) => {
    try {
      if (!settings) return;

      const { data: userData } = await supabase.auth.getUser();
      if (!userData.user) return;

      const { data, error } = await supabase
        .from('compliance_settings')
        .update({
          ...updates,
          updated_by: userData.user.id,
          updated_at: new Date().toISOString()
        })
        .eq('tenant_id', settings.tenant_id)
        .select()
        .single();

      if (error) throw error;

      setSettings(data);
      
      toast({
        title: "Settings Updated",
        description: "Compliance settings have been updated successfully."
      });

    } catch (error) {
      console.error('Error updating compliance settings:', error);
      toast({
        title: "Error",
        description: "Failed to update compliance settings",
        variant: "destructive"
      });
    }
  };

  useEffect(() => {
    fetchSettings();
  }, []);

  return {
    settings,
    loading,
    updateSettings,
    refreshSettings: fetchSettings
  };
};