// Deno Edge — build a ZIP "Evidence Pack" from the current answer and citations
// Returns application/zip with Content-Disposition attachment for board-ready documentation
import JSZip from "https://deno.land/x/jszip@0.11.0/mod.ts";

interface RequestBody {
  lang?: 'en' | 'ar';
  title?: string;
  question?: string;
  answer?: string;
  citations?: Citation[];
  tenant?: string;
}

interface Citation {
  n?: number;
  title?: string;
  portal?: string;
  doc_type?: string;
  href?: string;
  storage_path?: string;
  created_at?: string;
}

function text(lang: 'en'|'ar', en: string, ar: string): string { 
  return lang === 'ar' ? ar : en; 
}

function nowISO(): string { 
  return new Date().toISOString(); 
}

Deno.serve(async (req) => {
  // CORS headers for browser compatibility
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
  };

  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    if (req.method !== "POST") {
      return new Response(JSON.stringify({ ok: false, error: "method_not_allowed" }), {
        status: 405, 
        headers: { "Content-Type": "application/json", ...corsHeaders }
      });
    }

    const body: RequestBody = await req.json().catch(() => ({}));
    
    const lang: 'en'|'ar' = body?.lang === 'ar' ? 'ar' : 'en';
    const title: string = body?.title || text(lang, "AqlHR Evidence Pack", "حزمة الأدلة – عقل للموارد البشرية");
    const answer: string = body?.answer || "";
    const citations: Citation[] = Array.isArray(body?.citations) ? body.citations : [];
    const tenant: string = body?.tenant || "tenant";
    const question: string = body?.question || "";
    
    const meta = {
      title,
      lang,
      tenant,
      created_at: nowISO(),
      items: citations?.length || 0,
      question_length: question.length,
      answer_length: answer.length,
      note: "Evidence pack generated by AqlHR Assistant with PDPL compliance"
    };

    // PDPL-compliant disclaimers
    const enDisclaimer = [
      "AqlHR — Evidence Pack",
      "=" .repeat(50),
      "Generated: " + new Date().toLocaleString('en'),
      "",
      "This document is generated by AqlHR Assistant based on indexed materials and configured data sources.",
      "",
      "PDPL Notice: No personal data is included beyond permitted aggregates. Verify before external sharing.",
      "Compliance Notice: Not legal advice. For compliance actions, verify against official portals (QIWA/GOSI/Absher).",
      "Quality Assurance: This is an AI-generated response. Human review recommended for critical decisions.",
      "",
      "Contents:",
      "- answer.md: The evidence-backed answer in Markdown format",
      "- citations.json: Structured citation data with metadata",
      "- citations.csv: Citation data in spreadsheet-compatible format",
      "- metadata.json: Generation metadata and provenance information",
      "",
      "For questions or compliance concerns, contact your AqlHR administrator."
    ].join("\n");

    const arDisclaimer = [
      "عقل للموارد البشرية — حزمة الأدلة",
      "=" .repeat(50),
      "تم الإنشاء: " + new Date().toLocaleString('ar'),
      "",
      "تم إنشاء هذا المستند بواسطة مساعد AqlHR اعتمادًا على المواد المفهرسة ومصادر البيانات المهيأة.",
      "",
      "تنبيه نظام حماية البيانات الشخصية: لا يتضمن هذا الملف بيانات شخصية بخلاف المجاميع المسموح بها. يرجى المراجعة قبل المشاركة الخارجية.",
      "تنبيه الامتثال: هذا المستند ليس استشارة قانونية. عند تنفيذ إجراءات امتثال، يرجى التحقق من المنصات الرسمية (قوى/التأمينات/أبشر).",
      "ضمان الجودة: هذه إجابة مولدة بالذكاء الاصطناعي. يُنصح بالمراجعة البشرية للقرارات الحرجة.",
      "",
      "المحتويات:",
      "- answer.md: الإجابة المدعومة بالأدلة بصيغة Markdown",
      "- citations.json: بيانات الاستشهادات المنظمة مع البيانات الوصفية", 
      "- citations.csv: بيانات الاستشهادات بصيغة جداول البيانات",
      "- metadata.json: بيانات وصفية للإنشاء ومعلومات المصدر",
      "",
      "للاستفسارات أو المخاوف المتعلقة بالامتثال، اتصل بمدير AqlHR الخاص بك."
    ].join("\n");

    // Build ZIP file
    const zip = new JSZip();

    // README with disclaimers and instructions
    zip.file("README.txt", lang === 'ar' ? arDisclaimer : enDisclaimer);
    
    // Metadata for provenance and auditing
    zip.file("metadata.json", JSON.stringify(meta, null, 2));

    // Answer in Markdown format with bilingual header
    const mdHeader = lang === 'ar'
      ? `# إجابة مدعومة بالأدلة\n\n**التاريخ:** ${new Date().toLocaleDateString('ar')}\n**المؤسسة:** ${tenant}\n\n**السؤال:** ${question}\n\n**الإجابة:**\n\n${answer}\n\n---\n\n*تم الإنشاء بواسطة مساعد AqlHR - مدعوم بالأدلة*\n`
      : `# Evidence-backed Answer\n\n**Date:** ${new Date().toLocaleDateString('en')}\n**Organization:** ${tenant}\n\n**Question:** ${question}\n\n**Answer:**\n\n${answer}\n\n---\n\n*Generated by AqlHR Assistant - Evidence-backed*\n`;
    
    zip.file("answer.md", mdHeader);

    // Citations in multiple formats for different use cases
    const csvHeader = "n,title,portal,doc_type,created_at,storage_path,href\n";
    const csvRows = citations.map((c: Citation) => [
      c.n ?? "",
      escapeCsv(c.title ?? ""),
      escapeCsv(c.portal ?? ""), 
      escapeCsv(c.doc_type ?? ""),
      escapeCsv(c.created_at ?? ""),
      escapeCsv(c.storage_path ?? ""),
      escapeCsv(c.href ?? "")
    ].join(","));
    
    zip.file("citations.csv", csvHeader + csvRows.join("\n"));
    
    // Enhanced citations JSON with metadata
    const citationsWithMeta = {
      generated_at: nowISO(),
      language: lang,
      total_citations: citations.length,
      citations: citations.map((c, index) => ({
        ...c,
        sequence: index + 1,
        export_timestamp: nowISO()
      }))
    };
    
    zip.file("citations.json", JSON.stringify(citationsWithMeta, null, 2));

    // Generate ZIP binary
    const zipBlob = await zip.generateAsync({ 
      type: "uint8array",
      compression: "DEFLATE",
      compressionOptions: { level: 6 }
    });

    // Safe filename generation
    const timestamp = new Date().toISOString().slice(0, 10);
    const safeTitle = safeFileName(title);
    const safeTenant = safeFileName(tenant);
    const filename = `${safeTitle}-${safeTenant}-${timestamp}.zip`;

    return new Response(zipBlob, {
      status: 200,
      headers: {
        "Content-Type": "application/zip",
        "Content-Disposition": `attachment; filename="${filename}"`,
        "Content-Length": zipBlob.length.toString(),
        ...corsHeaders
      }
    });

  } catch (e: any) {
    console.error('Evidence bundle generation error:', e);
    return new Response(JSON.stringify({ 
      ok: false, 
      error: String(e?.message || e),
      timestamp: nowISO()
    }), {
      status: 500, 
      headers: { "Content-Type": "application/json", ...corsHeaders }
    });
  }
});

function safeFileName(s: string): string {
  return s.replace(/[^\p{L}\p{N}\-_\.]+/gu, "_").slice(0, 50);
}

function escapeCsv(v: any): string {
  const s = (v ?? "").toString();
  if (/[",\n\r]/.test(s)) {
    return `"${s.replace(/"/g, '""')}"`;
  }
  return s;
}