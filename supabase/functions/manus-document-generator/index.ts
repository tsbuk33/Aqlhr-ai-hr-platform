import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { prompt, documentType = 'policy', language = 'en', companyName = 'AqlHR Company' } = await req.json();

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const systemPrompts = {
      policy: language === 'ar' 
        ? `أنت خبير في كتابة السياسات المؤسسية للموارد البشرية. اكتب سياسة مهنية ومنظمة وفقاً للقوانين السعودية`
        : `You are an expert HR policy writer. Create a professional, well-structured policy document compliant with Saudi labor laws`,
      report: language === 'ar'
        ? `أنت خبير في إعداد التقارير التنفيذية للموارد البشرية. اكتب تقرير شامل ومفصل`
        : `You are an expert HR report analyst. Create a comprehensive, detailed executive report`,
      procedure: language === 'ar'
        ? `أنت خبير في كتابة الإجراءات التشغيلية للموارد البشرية. اكتب إجراء واضح ومفصل`
        : `You are an expert in HR operational procedures. Create clear, detailed step-by-step procedures`
    };

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4.1-2025-04-14',
        messages: [
          {
            role: 'system',
            content: `${systemPrompts[documentType as keyof typeof systemPrompts]}. Format the output as a professional document with proper headings, sections, and structure. Include company name: ${companyName}`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 3000
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`OpenAI API error: ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    const documentContent = data.choices[0].message.content;

    // Format as downloadable document
    const formattedDocument = `<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${companyName} - ${documentType} Document</title>
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            line-height: 1.6; 
            margin: 40px; 
            color: #333;
            direction: ${language === 'ar' ? 'rtl' : 'ltr'};
        }
        h1, h2, h3 { color: #2c5282; margin-top: 30px; }
        h1 { border-bottom: 2px solid #2c5282; padding-bottom: 10px; }
        .header { text-align: center; margin-bottom: 40px; }
        .footer { margin-top: 40px; font-size: 12px; color: #666; text-align: center; }
        .section { margin: 20px 0; }
        ol, ul { margin: 15px 0; }
        li { margin: 5px 0; }
    </style>
</head>
<body>
    <div class="header">
        <h1>${companyName}</h1>
        <h2>${documentType.charAt(0).toUpperCase() + documentType.slice(1)} Document</h2>
        <p>Generated on: ${new Date().toLocaleDateString(language === 'ar' ? 'ar-SA' : 'en-US')}</p>
    </div>
    
    <div class="content">
        ${documentContent.replace(/\n/g, '<br>').replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')}
    </div>
    
    <div class="footer">
        <p>Generated by AqlHR AI Document Assistant</p>
        <p>© ${new Date().getFullYear()} ${companyName}</p>
    </div>
</body>
</html>`;

    return new Response(JSON.stringify({
      success: true,
      document: {
        content: documentContent,
        html: formattedDocument,
        type: documentType,
        language: language,
        timestamp: new Date().toISOString()
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('Document generation error:', error);
    
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});