name: üîí Security Audit Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security audit nightly at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-lint:
    name: Security Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint Security Rules
        run: npm run lint:security
        continue-on-error: false

      - name: TypeScript Security Check
        run: npm run type-check
        continue-on-error: false

  supabase-security:
    name: Supabase Security Audit
    runs-on: ubuntu-latest
    needs: security-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Supabase RLS Policy Audit
        run: npm run audit:rls
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Check Database Security Configuration
        run: npm run audit:db-security

      - name: Upload Security Audit Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: supabase-security-audit
          path: |
            security-audit-*.json
            rls-policy-audit.md

  company-isolation-tests:
    name: Company Data Isolation Tests
    runs-on: ubuntu-latest
    needs: supabase-security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Company Isolation Security Tests
        run: npm run test:security:isolation
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          TEST_USER_EMAIL_A: ${{ secrets.TEST_USER_EMAIL_A }}
          TEST_USER_PASSWORD_A: ${{ secrets.TEST_USER_PASSWORD_A }}
          TEST_USER_EMAIL_B: ${{ secrets.TEST_USER_EMAIL_B }}
          TEST_USER_PASSWORD_B: ${{ secrets.TEST_USER_PASSWORD_B }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: isolation-test-results
          path: security-test-results.json

  auth-security-tests:
    name: Authentication Security Tests
    runs-on: ubuntu-latest
    needs: security-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test Authentication Bypass Prevention
        run: npm run test:security:auth

      - name: Test Route Protection
        run: npm run test:security:routes

      - name: Test Session Security
        run: npm run test:security:sessions

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-lint, supabase-security, company-isolation-tests, auth-security-tests, dependency-security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate Comprehensive Security Report
        run: npm run security:generate-report

      - name: Upload Comprehensive Security Report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: |
            SECURITY_AUDIT_REPORT.md
            security-summary.json

      - name: Comment PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('security-summary.json', 'utf8');
              const data = JSON.parse(summary);
              
              const comment = `## üîí Security Audit Results
              
              **Overall Security Score:** ${data.overallScore}/100
              
              **Critical Issues:** ${data.criticalIssues}
              **High Issues:** ${data.highIssues}  
              **Medium Issues:** ${data.mediumIssues}
              
              **RLS Policy Coverage:** ${data.rlsPolicyCoverage}%
              **Authentication Tests:** ${data.authTestsPassed ? '‚úÖ PASSED' : '‚ùå FAILED'}
              **Company Isolation Tests:** ${data.isolationTestsPassed ? '‚úÖ PASSED' : '‚ùå FAILED'}
              
              ${data.criticalIssues > 0 ? 'üö® **CRITICAL ISSUES DETECTED** - Review required before merge' : '‚úÖ No critical security issues detected'}
              
              [View Full Report](../actions/runs/${context.runId})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post security summary comment:', error);
            }

  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [security-lint, supabase-security, company-isolation-tests, auth-security-tests]
    if: always()
    steps:
      - name: Check Security Results
        run: |
          echo "Checking security gate requirements..."
          
          # Fail if any critical security job failed
          if [ "${{ needs.security-lint.result }}" != "success" ]; then
            echo "‚ùå Security linting failed"
            exit 1
          fi
          
          if [ "${{ needs.supabase-security.result }}" != "success" ]; then
            echo "‚ùå Supabase security audit failed" 
            exit 1
          fi
          
          if [ "${{ needs.company-isolation-tests.result }}" != "success" ]; then
            echo "‚ùå Company isolation tests failed"
            exit 1
          fi
          
          if [ "${{ needs.auth-security-tests.result }}" != "success" ]; then
            echo "‚ùå Authentication security tests failed"
            exit 1
          fi
          
          echo "‚úÖ All security checks passed"