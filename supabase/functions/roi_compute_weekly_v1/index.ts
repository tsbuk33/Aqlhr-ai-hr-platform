import { serve, createClient, corsHeaders, PDFLib } from "../_shared/deps.ts";

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const { tenantId, lang = 'en' } = await req.json();

    // Resolve tenant ID
    let resolvedTenantId = tenantId;
    if (!resolvedTenantId) {
      // Try to get from session first, then fallback to demo
      const authHeader = req.headers.get('authorization');
      if (authHeader) {
        const token = authHeader.replace('Bearer ', '');
        const { data: { user } } = await supabaseClient.auth.getUser(token);
        if (user) {
          const { data: profile } = await supabaseClient
            .from('profiles')
            .select('company_id')
            .eq('user_id', user.id)
            .single();
          resolvedTenantId = profile?.company_id;
        }
      }
      
      if (!resolvedTenantId) {
        // Fallback to demo tenant
        const { data: demoTenant } = await supabaseClient
          .rpc('get_demo_tenant_id');
        resolvedTenantId = demoTenant;
      }
    }

    if (!resolvedTenantId) {
      return new Response(
        JSON.stringify({ error: 'Could not resolve tenant ID' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log(`[ROI Weekly Report] Processing for tenant: ${resolvedTenantId}`);

    // Backfill snapshots and get data
    await supabaseClient.rpc('roi_backfill_snapshots_v1', { p_tenant: resolvedTenantId });
    
    const [summaryResult, trendResult] = await Promise.all([
      supabaseClient.rpc('roi_get_last30_v1', { p_tenant: resolvedTenantId }),
      supabaseClient.rpc('roi_get_trend_v1', { p_tenant: resolvedTenantId, p_days: 30 })
    ]);

    if (summaryResult.error) throw summaryResult.error;
    if (trendResult.error) throw trendResult.error;

    const summary = summaryResult.data || {};
    const trend = trendResult.data || [];

    // Get company info
    const { data: company } = await supabaseClient
      .from('companies')
      .select('name, company_name_arabic')
      .eq('id', resolvedTenantId)
      .single();

    // Generate PDF
    const pdfDoc = await PDFLib.PDFDocument.create();
    const page = pdfDoc.addPage([595, 842]); // A4 size
    const { width, height } = page.getSize();
    
    // Add content
    const fontSize = 12;
    let yPosition = height - 50;
    
    // Title
    page.drawText(
      lang === 'ar' ? 'تقرير العائد على الاستثمار الأسبوعي' : 'Weekly ROI Report',
      { x: 50, y: yPosition, size: 18 }
    );
    yPosition -= 40;
    
    // Company name
    const companyName = lang === 'ar' ? (company?.company_name_arabic || company?.name) : company?.name;
    page.drawText(companyName || 'AqlHR Client', { x: 50, y: yPosition, size: 14 });
    yPosition -= 40;
    
    // Summary data
    page.drawText(
      lang === 'ar' ? 'ملخص آخر 30 يوماً:' : 'Last 30 Days Summary:',
      { x: 50, y: yPosition, size: fontSize }
    );
    yPosition -= 20;
    
    const summaryLines = [
      `${lang === 'ar' ? 'المهام المُنجزة:' : 'Tasks Completed:'} ${summary.tasks || 0}`,
      `${lang === 'ar' ? 'الرسائل المُولدة:' : 'Letters Generated:'} ${summary.letters || 0}`,
      `${lang === 'ar' ? 'الساعات المُوفرة:' : 'Hours Saved:'} ${(summary.hours_saved || 0).toFixed(1)}h`,
      `${lang === 'ar' ? 'التوفير المقدر:' : 'Estimated Savings:'} ${((summary.hours_saved || 0) * 150).toFixed(0)} SAR`
    ];
    
    summaryLines.forEach(line => {
      page.drawText(line, { x: 70, y: yPosition, size: fontSize });
      yPosition -= 18;
    });
    
    yPosition -= 20;
    
    // Last 7 days trend
    page.drawText(
      lang === 'ar' ? 'اتجاه آخر 7 أيام:' : 'Last 7 Days Trend:',
      { x: 50, y: yPosition, size: fontSize }
    );
    yPosition -= 20;
    
    const last7Days = trend.slice(-7);
    last7Days.forEach((day: any) => {
      const dateStr = new Date(day.d).toLocaleDateString();
      const hoursStr = (day.hours_saved || 0).toFixed(1);
      page.drawText(`${dateStr}: ${hoursStr}h`, { x: 70, y: yPosition, size: 10 });
      yPosition -= 15;
    });
    
    yPosition -= 30;
    
    // Disclaimer
    const disclaimer = lang === 'ar' 
      ? 'تم إنشاء هذا التقرير بواسطة منصة أقل للموارد البشرية'
      : 'This report was generated by AqlHR - Smart HR Management Platform';
    page.drawText(disclaimer, { x: 50, y: yPosition, size: 10 });

    // Generate PDF buffer
    const pdfBytes = await pdfDoc.save();

    // Create storage bucket if it doesn't exist
    const { error: bucketError } = await supabaseClient.storage
      .createBucket('roi-reports', { public: false });
    
    if (bucketError && !bucketError.message?.includes('already exists')) {
      console.error('Bucket creation error:', bucketError);
    }

    // Generate file path
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const dateStr = now.toISOString().split('T')[0];
    const filePath = `${resolvedTenantId}/${year}/${month}/AqlHR_ROI_${dateStr}.pdf`;

    // Upload to storage
    const { error: uploadError } = await supabaseClient.storage
      .from('roi-reports')
      .upload(filePath, pdfBytes, {
        contentType: 'application/pdf',
        upsert: true
      });

    if (uploadError) {
      console.error('Upload error:', uploadError);
      throw uploadError;
    }

    // Generate signed URL (valid for 24 hours)
    const { data: signedUrlData, error: signedUrlError } = await supabaseClient.storage
      .from('roi-reports')
      .createSignedUrl(filePath, 86400); // 24 hours

    if (signedUrlError) {
      console.error('Signed URL error:', signedUrlError);
      throw signedUrlError;
    }

    console.log(`[ROI Weekly Report] Generated successfully for tenant: ${resolvedTenantId}`);

    return new Response(
      JSON.stringify({ signedUrl: signedUrlData.signedUrl }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('[ROI Weekly Report] Error:', error);
    return new Response(
      JSON.stringify({ error: 'Failed to generate weekly ROI report' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});