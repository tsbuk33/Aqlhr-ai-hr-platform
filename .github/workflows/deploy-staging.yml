name: Deploy to Staging

on:
  push:
    tags:
      - 'v*-rc*'

env:
  STAGING_URL: https://staging.sanadhr.com
  SUPABASE_PROJECT_ID: qcuhjcyjlkfizesndmth
  NODE_VERSION: '18'

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci || npm install --no-audit --no-fund
      
      - name: Run tests
        run: npm run test:ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Build application
        run: npm run build
      
      - name: Run security audit
        run: npm audit --audit-level=high
      
      - name: Bundle size check
        run: |
          npm run build:analyze
          if [ $(du -k dist | cut -f1) -gt 2200 ]; then
            echo "Bundle size exceeds 2.2MB limit"
            exit 1
          fi

  database-migration:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Run database migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ env.SUPABASE_PROJECT_ID }}
        run: |
          supabase db push --project-ref $SUPABASE_PROJECT_ID
          
      - name: Verify migration status
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ env.SUPABASE_PROJECT_ID }}
        run: |
          supabase migration list --project-ref $SUPABASE_PROJECT_ID

  blue-green-deployment:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, database-migration]
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci || npm install --no-audit --no-fund
      
      - name: Build for staging
        env:
          NODE_ENV: staging
          VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
        run: npm run build
      
      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod --yes'
          alias-domains: staging.sanadhr.com

  seed-test-data:
    runs-on: ubuntu-latest
    needs: blue-green-deployment
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci || npm install --no-audit --no-fund
      
      - name: Seed staging data
        env:
          SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          npm run seed:staging -- --amount 50 --locale sa_AR
          
      - name: Verify seed data
        env:
          SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          npm run verify:staging-data

  smoke-tests:
    runs-on: ubuntu-latest
    needs: seed-test-data
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci || npm install --no-audit --no-fund
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Run smoke tests
        env:
          STAGING_URL: ${{ env.STAGING_URL }}
          STAGING_USERNAME: ${{ secrets.STAGING_USERNAME }}
          STAGING_PASSWORD: ${{ secrets.STAGING_PASSWORD }}
        run: npm run test:smoke -- --headed=false
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: test-results/

  performance-validation:
    runs-on: ubuntu-latest
    needs: smoke-tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ env.STAGING_URL }}
            ${{ env.STAGING_URL }}/dashboard
            ${{ env.STAGING_URL }}/employees
            ${{ env.STAGING_URL }}/payroll
          configPath: ./.lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      - name: Load testing with k6
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/load/staging-load-test.js
        env:
          STAGING_URL: ${{ env.STAGING_URL }}

  security-scan:
    runs-on: ubuntu-latest
    needs: blue-green-deployment
    steps:
      - uses: actions/checkout@v4
      
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ env.STAGING_URL }}
          rules_file_name: '.zap/rules.tsv'
      
      - name: Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  monitoring-setup:
    runs-on: ubuntu-latest
    needs: performance-validation
    steps:
      - name: Configure monitoring alerts
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST "https://api.grafana.com/alerts" \
            -H "Authorization: Bearer $GRAFANA_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "SanadHR Staging Alert",
              "message": "Error rate exceeded threshold",
              "frequency": "60s",
              "conditions": [
                {
                  "query": "error_rate > 0.005",
                  "reducer": "avg",
                  "type": "query"
                }
              ]
            }'

  deployment-notification:
    runs-on: ubuntu-latest
    needs: [smoke-tests, performance-validation, security-scan, monitoring-setup]
    if: always()
    steps:
      - name: Notify deployment status
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          VERSION: ${{ needs.pre-deployment-checks.outputs.version }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="✅ SUCCESS"
            COLOR="good"
            MESSAGE="Staging deployment completed successfully!"
          else
            STATUS="❌ FAILURE" 
            COLOR="danger"
            MESSAGE="Staging deployment failed. Check logs for details."
          fi
          
          curl -X POST $SLACK_WEBHOOK \
            -H 'Content-type: application/json' \
            -d "{
              \"text\": \"SanadHR Staging Deployment\",
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"fields\": [
                  {\"title\": \"Status\", \"value\": \"$STATUS\", \"short\": true},
                  {\"title\": \"Version\", \"value\": \"$VERSION\", \"short\": true},
                  {\"title\": \"Environment\", \"value\": \"Staging\", \"short\": true},
                  {\"title\": \"URL\", \"value\": \"${{ env.STAGING_URL }}\", \"short\": true}
                ],
                \"text\": \"$MESSAGE\"
              }]
            }"
      
      - name: Create deployment summary
        run: |
          echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.pre-deployment-checks.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ env.STAGING_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 24-Hour Validation Period" >> $GITHUB_STEP_SUMMARY
          echo "Monitor the staging environment for 24 hours before production deployment." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Monitoring Dashboard:** https://monitoring.sanadhr.com/staging" >> $GITHUB_STEP_SUMMARY
          echo "**Alert Thresholds:** Error > 0.5%, CPU > 70%, Response > 500ms" >> $GITHUB_STEP_SUMMARY